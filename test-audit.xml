<?xml version="1.0" encoding="UTF-8"?>
<specification xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://jboss.com/products/weld/tck/audit" xsi:schemaLocation="http://jboss.com/products/weld/tck/audit"
	name="JSR 354 Money and Currency" version="1.0.0" id="JSR 354"
	generateSectionIds="false">
	<section id="0" title="TCK Setup">
		<assertion id="EnsureSetup">
			<text>Ensure an implementation of
				org.javamoney.tck.JSR354TestConfiguration is registered using the
				java.util.ServiceLoader.
			</text>
		</assertion>
	</section>
	<section id="1" title="Introduction, Use Cases, Requirements (no tests)" />
	<section id="2" title="Use Cases" />
	<section id="3" title="Requirements" />
	<section id="3.1" title="Core Requirements" />
	<section id="3.2" title="Formatting Requirements" />
	<section id="3.3" title="EE and ME Support" />
	<section id="3.4" title="Non Functional Requirements" />

	<section id="4" title="Specification" />

	<!-- **************************************************************** **** 
		Core API **************************************************************** -->
	<section id="4.1" title="Package and Project Structure" />
	<section id="4.1.1" title="Package Overview" />
	<section id="4.1.2" title="Module/Repository Overview" />
	<section id="4.2" title="Money and Currency Core API" />
	<section id="4.2.1" title="Modelling of Currencies">
		<group>
			<text>Managing the Currency code</text>
			<assertion id="421-1">
				<text>Ensure at least one javax.money.CurrencyUnit implementation
					is
					available and registered/accessible from MonetaryCurrencies.
				</text>
			</assertion>
			<assertion id="421-2">
				<text>Test that currencies returned for same ISO currency code are
					equal, ensure when listing all available currencies, thath the
					code
					is unique.
				</text>
			</assertion>
			<assertion id="421-3">
				<text>Ensure all ISO 3-letters codes as defined by the JDK are also
					available from MonetaryCurrencies.
				</text>
			</assertion>
			<assertion id="421-4">
				<text>Test that JDK currencies returned
					match the values of
					corresponding JDK Currency (code, numeric code,
					default fraction
					digits).
				</text>
			</assertion>
		</group>
		<group>
			<text>Currency Unit Implementation Requirements</text>
			<assertion id="421-5">
				<text>CurrencyUnit must implement equals/hashCode.
				</text>
			</assertion>
			<assertion id="421-6">
				<text>CurrencyUnit implementation must be Comparable.
				</text>
			</assertion>
			<assertion id="421-7">
				<text>CurrencyUnit implementation must be immutable.
				</text>
			</assertion>
			<assertion id="421-8">
				<text>CurrencyUnit implementation must be thread safe.
				</text>
			</assertion>
			<assertion id="421-9">
				<text>CurrencyUnit implementation must be serializable.
				</text>
			</assertion>
		</group>
	</section>
	<section id="4.2.2" title="Modeling of Monetary Amounts">
		<group>
			<text>Preconditions</text>
			<assertion id="422-1">
				<text>Ensure at least one javax.money.MonetaryAmount
					implementation
					is registered, by calling MonetaryAmounts.getAmountTypes();
				</text>
			</assertion>
		</group>
		<!-- Test the following tests for each type registered. Use MonetaryAmountFactory 
			to create instances to be compared. -->
		<group>
			<text>Data Interoperability</text>
			<assertion id="422-2">
				<text>Ensure getCurrencyCode returns correct results.</text>
			</assertion>
			<assertion id="422-3">
				<text>Ensure getNumber() returns correct results.</text>
			</assertion>
			<assertion id="422-4">
				<text>Ensure getMonetaryContext() returns correct results.
				</text>
			</assertion>
			<assertion id="422-5">
				<text>Ensure isNegative() returns correct results.</text>
			</assertion>
			<assertion id="422-6">
				<text>Ensure isPositive() returns correct results.</text>
			</assertion>
			<assertion id="422-7">
				<text>Ensure isZero() returns correct results (-0, +0 == 0).</text>
			</assertion>
			<assertion id="422-8">
				<text>The signum() function is implemented correctly.</text>
			</assertion>
		</group>
		<group>
			<text>Prototyping Support</text>
			<assertion id="422-9">
				<text>Ensure getFactory returns a MonetaryAmountFactory and that
					instances created are of the same type.
				</text>
			</assertion>
			<assertion id="422-10">
				<text>Call getFactory(), create a new instance. The instances must
					be equal (or even be identical!)..
				</text>
			</assertion>
			<assertion id="422-11">
				<text>Call getFactory(), create a new instance with a new number
					value. The instances must
					be non equal and have the according
					numeric value.
				</text>
			</assertion>
			<assertion id="422-12">
				<text>Call getFactory(), create a new instance with a new currency
					value. The instances must
					be non equal and have the according
					currency value. Do this by code and by passing a CurrencyUnit.
				</text>
			</assertion>
			<assertion id="422-13">
				<text>Call getFactory(), create a new instance with a new monetary
					context (if possible - check the max context).
					The instances must
					be
					non equal (check with spec...) and have the
					same currency and
					number
					value.
				</text>
			</assertion>
			<assertion id="422-14">
				<text>Call getFactory(), create a new instance with a new monetary
					context, a new number and a new currency.
					The instances must be non
					equal.
				</text>
			</assertion>
		</group>
		<group>
			<text>Comparison Methods</text>
			<assertion id="422-15">
				<text>The isGreaterThan() implemented correctly.</text>
			</assertion>
			<assertion id="422-16">
				<text>The isGreaterThanOrEqals() implemented correctly, regardless
					of trailing zeroes.
				</text>
			</assertion>
			<assertion id="422-17">
				<text>The isLessThan() implemented correctly.</text>
			</assertion>
			<assertion id="422-18">
				<text>The isLessThanOrEqals() implemented correctly, regardless of
					trailing zeroes.
				</text>
			</assertion>
			<assertion id="422-19">
				<text>The isEqualTos() return true, regardless of trailing zeroes.
				</text>
			</assertion>
		</group>
		<group>
			<text>Basic Arithmetic Operations</text>
			<assertion id="422-20">
				<text>The add() function must add two values.
				</text>
			</assertion>
			<assertion id="422-21">
				<text>The add() function with non matching currencies must throw a
					MonetaryException.
				</text>
			</assertion>
			<assertion id="422-22">
				<text>The subtract() function must subtract a value from another.
				</text>
			</assertion>
			<assertion id="422-23">
				<text>The subtract() function with non matching currencies must
					throw a MonetaryException.
				</text>
			</assertion>
			<assertion id="422-24">
				<text>The multiply function allow to multiply numbers.
				</text>
			</assertion>
			<assertion id="422-25">
				<text>The "divide" function allow to divide numbers.
				</text>
			</assertion>
			<assertion id="422-26">
				<text>The ""remainder"" function allow to calculate the remainder.
				</text>
			</assertion>
			<assertion id="422-27">
				<text>The "divideAndRemainder" function allow to dive/remind
					numbers.
				</text>
			</assertion>
			<assertion id="422-28">
				<text>The "scaleByPowerOfTen" function allow to scale by power of
					10.
				</text>
			</assertion>
			<assertion id="422-29">
				<text>The abs() function allow to scalculate the absolute value.
				</text>
			</assertion>
			<assertion id="422-30">
				<text>The negate() function allow to negate the value.
				</text>
			</assertion>
		</group>
		<group>
			<text>Functional Extension Points</text>
			<assertion id="422-41">
				<text>Ensure with(MonetaryOperator) can be called and produces
					amounts of the same type and correct value.
				</text>
			</assertion>
			<assertion id="422-42">
				<text>When an invalid operator is passed (throwing any exception),
					a
					MonetaryException must be thrown. When null is passed, an NPE
					must
					be thrown.
				</text>
			</assertion>
			<assertion id="422-42">
				<text>Ensure query(MonetaryQUery) can be called and produces
					valuable results.
				</text>
			</assertion>
			<assertion id="422-43">
				<text>When an invalid query is passed (throwing any exception), a
					MonetaryException must be thrown. When null is passed, an NPE must
					be thrown.
				</text>
			</assertion>
		</group>
		<group>
			<text>Monetary Amount Implementation Requirements</text>
			<assertion id="422-44">
				<text>Implementations of MonetaryAmount must implement hashCode and
					equals,
					considering number, currency and implementation type,
					monetary
					context.
				</text>
			</assertion>
			<assertion id="422-45">
				<text>Implementations of MonetaryAmount must be Comparable.
				</text>
			</assertion>
			<assertion id="422-46">
				<text>Implementations of MonetaryAmount must be serializable.
				</text>
			</assertion>
			<assertion id="422-47">
				<text>Implementations of MonetaryAmount should implement a method
					getAmount().
				</text>
			</assertion>
		</group>
		<group>
			<text>Monetary Amount Implementation Recommendations</text>
			<assertion id="422-48">
				<text>Implementations of MonetaryAmount should be immutable.
				</text>
			</assertion>
			<assertion id="422-49">
				<text>Implementations of MonetaryAmount should be thread safe.
				</text>
			</assertion>
			<assertion id="422-50">
				<text>Implementations of MonetaryAmount should have a static
					MyClass
					from(MonetaryAmount) method.
				</text>
			</assertion>
			<assertion id="422-51">
				<text>Implementations of MonetaryAmount should implement a method
					getAmount().
				</text>
			</assertion>
		</group>
	</section>
	<section id="4.2.3" title="Externalizing the Numeric Value of an Amount">
		<assertion id="423-1">
			<text>Checks if number type is not null and returning a concrete (no
				abstract class or interface).
			</text>
		</assertion>
		<assertion id="423-2">
			<text>Check if a correct integer value is returned, no truncation is
				allowed to be performed.
			</text>
		</assertion>
		<assertion id="423-3">
			<text>Check if a correct long value is returned, no truncation is
				allowed to be performed.
			</text>
		</assertion>
		<assertion id="423-4">
			<text>Check if a correct double value is returned, no truncation is
				allowed to be performed.
			</text>
		</assertion>
		<assertion id="423-5">
			<text>Check if a correct number value is returned, no truncation is
				allowed to be performed.
				Check should be done for every JDK type
				supported.
			</text>
		</assertion>
		<assertion id="423-6">
			<text>Check if a correct integer value is returned, truncation is
				allowed to be performed.
			</text>
		</assertion>
		<assertion id="423-7">
			<text>Check if a correct long value is returned, truncation is
				allowed to be performed.
			</text>
		</assertion>
		<assertion id="423-8">
			<text>Check if a correct double value is returned, truncation is
				allowed to be performed.
			</text>
		</assertion>
		<assertion id="423-9">
			<text>Check if a correct number value is returned, truncation is
				allowed to be performed.
				Check should be done for every JDK type
				supported.
			</text>
		</assertion>
		<assertion id="423-10">
			<text>Test correct precision values, including border cases.
			</text>
		</assertion>
		<assertion id="423-12">
			<text>Test correct scale values, including border cases.
			</text>
		</assertion>
	</section>
	<section id="4.2.4" title="Functional Extension Points">
		<group>
			<text>Monetary Operator Implementation Requirements</text>
			<assertion id="Operator_CheckReturnType">
				<text>The return type of apply must be the same type as the
					parameter
					(amount.getClass() == result.getClass()).
				</text>
			</assertion>
		</group>
		<group>
			<text>Monetary Operator Implementation Recommendations</text>
			<assertion id="Operator_ShouldBeImmutable">
				<text>Monetary operators are recommended to be immutable</text>
			</assertion>
			<assertion id="Operator_ShouldBeThreadSafe">
				<text>Monetary operators are recommended to be thread-safe</text>
			</assertion>
			<assertion id="Query_ShouldBeImmutable">
				<text>Monetary queries are recommended to be immutable</text>
			</assertion>
			<assertion id="Query_ShouldBeThreadSafe">
				<text>Monetary queries are recommended to be thread-safe</text>
			</assertion>
		</group>
	</section>
	<section id="4.2.5" title="The Monetary Context">
		<!-- No tests, class is part of API! -->
	</section>
	<!-- Theses tests must be done for every amount type registered. Factories 
		must be accessed first using MonetaryAmounts singleton, then from a created 
		amount. -->
	<section id="4.2.6" title="Creating Monetary Amount Instances">
		<assertion id="426-1">
			<text>Checks if getAmountType returns a usable type.</text>
		</assertion>
		<assertion id="426-2">
			<text>Checks for default and max MonetaryContext.</text>
		</assertion>
		<assertion id="426-3">
			<text>Create values from a factory with currencies, numbers.</text>
		</assertion>
		<assertion id="426-4">
			<text>Create values from a factory with monetary contexts.</text>
		</assertion>
	</section>
	<section id="4.2.7" title="Accessing Currencies, Amounts and Roundings">
		<group>
			<text>Accessing Currencies</text>
			<assertion id="427-1">
				<text>Test if MonetaryCurrencies provides all ISO related entries,
					similar to the JDK.
				</text>
			</assertion>
			<assertion id="427-2">
				<text>Test if MonetaryCurrencies provides all Locale related
					entries,
					similar to the JDK.
				</text>
			</assertion>
			<assertion id="427-3">
				<text>Test if MonetaryCurrencies provides correct check for ISO
					codes.
				</text>
			</assertion>
			<assertion id="427-4">
				<text>Test if MonetaryCurrencies provides correct check for
					Locales.
				</text>
			</assertion>
		</group>
		<group>
			<text>Accessing Monetary Amount Factories</text>
			<assertion id="427-5">
				<text>Ensure the types available, must be at least one type (if one
					has a specified AmountFlavor, 2 are recommended).
				</text>
			</assertion>
			<assertion id="427-6">
				<text>Ensure amount factories are accessible for all types
					available,
					providing also the
					some test implementations with the
					TCK..
				</text>
			</assertion>
			<assertion id="427-7">
				<text>Ensure amount factories are accessible for all types
					available,
					providing also the
					some test implementations with the
					TCK,
					and that
					every factory accessed
					is a new instance.
				</text>
			</assertion>
			<assertion id="427-8">
				<text>Ensure correct query function implementations, providing also
					the
					some test implementations with the TCK.
				</text>
			</assertion>
			<assertion id="427-9">
				<text>Ensure a default factory is returned. Test javamoney.config
					for
					configuring default value.
				</text>
			</assertion>
		</group>
		<group>
			<text>427-10</text>
			<!-- All roundings are MonetaryOPerator instances, so apply all MonetaryOperator 
				tests (and recommendations) as defined in section 4.2.4 -->
			<assertion id="427-11">
				<text>Access roundings using all defined currencies.</text>
			</assertion>
			<assertion id="427-12">
				<text>Access roundings using a MonetaryContext. Use different
					MathContext/RoundingMode, as an attribute, when running
					on the JDK.
				</text>
			</assertion>
			<assertion id="427-13">
				<text>Check if custom roundings are available, if yes, access and
					test them.
				</text>
			</assertion>
		</group>
	</section>
	<section id="4.2.8" title="Additional Functional Support" />
	<section id="4.2.9" title="Exception Types" />

	<section id="4.3" title="Currency Conversion" />
	<section id="4.3.1" title="MonetaryConversions Singleton" />
	<section id="4.3.2" title="Converting Amounts" />
	<section id="4.3.3" title="Exchange Rates and Rate Providers" />
	<section id="4.3.4" title="Provider Chains" />

	<section id="4.4" title="Money and Currency Formatting API" />
	<section id="4.4.1" title="Formatting of Monetary Amounts">
		<group>
			<text>Test a concrete MonetaryAmountFormat Implementation</text>
			<assertion id="441-1">
				<text>Format several amounts, created using the default factory,
					but
					also a test instance, provided by the TCK, to ensure no
					implementation
					dependencies on the implementation.
				</text>
			</assertion>
			<assertion id="441-2">
				<text>Print several amounts, created using the default factory, but
					also a test instance, provided by the TCK, to ensure no
					implementation
					dependencies on the implementation.
				</text>
			</assertion>
			<assertion id="441-3">
				<text>Parse back several amounts, input created using the
					formatting
					from 'Format_formatAmounts'.
				</text>
			</assertion>
			<assertion id="441-4">
				<text>Get/set different amount styles (especially patterns, group
					sizes, group characters) and compare results with results as from
					RI.
					Also apply patterns without currency invovled.
				</text>
			</assertion>
			<assertion id="441-5">
				<text>Get/set different monetary contexts and compare results with
					results from parsed amounts.
				</text>
			</assertion>
			<assertion id="441-6">
				<text>Get/set default currency, try to parse patterns without
					currency information.
				</text>
			</assertion>
		</group>
		<group>
			<text>Accessing Monetary Amount Formats</text>
			<assertion id="441-7">
				<text>AccessingMonetaryAmountFormat using
					MonetaryFormats.getAmountFormat(Locale locale), all locales
					available also from java.text.DecimalFormat must be supported.
				</text>
			</assertion>
			<assertion id="441-8">
				<text>AccessingMonetaryAmountFormat using
					MonetaryFormats.getAmountFormat(AmountStyle style), all locales
					available also from java.text.DecimalFormat must be supported
					(using AmountStyle.of(Locale)).
				</text>
			</assertion>
			<assertion id="441-9">
				<text>Test
					MonetaryFormats.getAvailableLocales, all locales
					available
					also from java.text.DecimalFormat must be supported
					(using
					AmountStyle.of(Locale)), more locales are possible.
				</text>
			</assertion>
		</group>
	</section>
	<section id="4.5" title="Money and Currency SPI" />
	<section id="4.5.1" title="Core SPI">
		<group>
			<text>Registering Currencies</text>
			<assertion id="451-1">
				<text>Test registered CurrencyProviderSpi (at least one instance
					required). Test behaviour,
					especially bad case behaviour for invalid
					input.
				</text>
			</assertion>
		</group>
		<group>
			<text>Registering Monetary Amount Factories</text>
			<assertion id="451-2">
				<text>Test registered MonetaryAmountsSpi (at least one instance
					required). Test behaviour,
					especially bad case behaviour for invalid
					input.
				</text>
			</assertion>
		</group>
		<group>
			<text>Backing the MonetaryAmounts Singleton</text>
			<assertion id="451-3">
				<text>Test registered RoundingProviderSpi (at least one instance
					required). Test behaviour,
					especially bad case behaviour for invalid
					input.
				</text>
			</assertion>
		</group>
		<group>
			<text>Registering Roundings</text>
			<assertion id="451-4">
				<text>Test registered RoundingProviderSpi (at least one instance
					required). Test behaviour,
					especially bad case behaviour for invalid
					input.
				</text>
			</assertion>
		</group>
		<group>
			<text>Adapting Currency Conversion</text>
		</group>
		<group>
			<text>Adapting the Logging Backend</text>
			<assertion id="451-5">
				<text>Test logger backend (optional, only if one is
					registered). Test
					behaviour,
					especially bad case behaviour for
					invalid
					input.
				</text>
			</assertion>
		</group>
	</section>
	<section id="4.5.2" title="Formatting SPI">
		<group>
			<text>Prodivding Monetary Amount Format Symbols</text>
			<assertion id="452-1">
				<text>Test registered AmountFormatSymbolsSpi (one is required).
					Test
					behaviour (every locale in DecimalFormatSybols must be
					supported),
					especially bad case behaviour for
					invalid
					input.
				</text>
			</assertion>
		</group>
		<group>
			<text>Prodivding Amount Styles</text>
			<assertion id="452-2">
				<text>Test registered AmountStyleProviderSpi (one is required).
					Test
					behaviour (every locale in DecimalFormatSybols must be
					supported),
					especially bad case behaviour for
					invalid
					input.
				</text>
			</assertion>
		</group>
		<group>
			<text>Prodivding Amount Formats</text>
			<assertion id="452-3">
				<text>Test registered MonetaryAmountFormatProviderSpi (one is
					required),
					especially bad case behaviour for
					invalid
					input.
				</text>
			</assertion>
		</group>
	</section>
	<section id="4.5.3" title="The Bootstrapping Mechanism">
	</section>
	<section id="5" title="Recommendations" />
	<section id="6" title="Examples" />
</specification>
